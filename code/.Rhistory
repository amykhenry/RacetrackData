ggplot(res, aes(x = observed, y = expected, colour = type)) + geom_point() + geom_abline(slope = 1, intercept = 0) + facet_wrap(~type, scales = "free")
E2_an <- function(r, f, connectance){
return(-(connectance * f / 4)  * (1  + 2 * r)^2 )
}
res <- data.frame()
for (i in 1:100){
# choose pars at random
connectance <- runif(1, 0.25, 0.5)
f <- runif(1)
r <- runif(1, 1, 10)
n <- 500
M <- build_matrix(n =n, r = r, f = f, connectance = connectance)
res <- rbind(res, data.frame(i = i,
type = "E",
expected = E_an(r,f,connectance),
observed = E_sample(M)
))
res <- rbind(res, data.frame(i = i,
type = "V",
expected = V_an(r,f,connectance),
observed = V_sample(M)
))
res <- rbind(res, data.frame(i = i,
type = "E2",
expected = E2_an(r,f,connectance),
observed = E2_sample(M)
))
res <- rbind(res, data.frame(i = i,
type = "rho",
expected = rho_an(r,f,connectance),
observed = rho_sample(M)
))
print(res)
}
ggplot(res, aes(x = observed, y = expected, colour = type)) + geom_point() + geom_abline(slope = 1, intercept = 0) + facet_wrap(~type, scales = "free")
source('~/.active-rstudio-document', echo=TRUE)
ggplot(res, aes(x = observed, y = expected, colour = type)) + geom_point() + geom_abline(slope = 1, intercept = 0) + facet_wrap(~type, scales = "free")
source('~/.active-rstudio-document', echo=TRUE)
ggplot(res, aes(x = observed, y = expected, colour = type)) + geom_point() + geom_abline(slope = 1, intercept = 0) + facet_wrap(~type, scales = "free")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
ggplot(res, aes(x = observed, y = expected, colour = type)) + geom_point() + geom_abline(slope = 1, intercept = 0) + facet_wrap(~type, scales = "free")
```{r}
res <- data.frame()
for (i in 1:100){
# choose pars at random
connectance <- runif(1, 0.25, 0.5)
f <- runif(1,0.2,0.7)
r <- runif(1, 1, 5)
n <- 1000
M <- build_matrix(n =n, r = r, f = f, connectance = connectance)
res <- rbind(res, data.frame(
n =n, r = r, f = f, connectance = connectance,i = i,
type = "E",
expected = E_an(r,f,connectance),
observed = E_sample(M)
))
res <- rbind(res, data.frame(n =n, r = r, f = f, connectance = connectance,i = i,
type = "V",
expected = V_an(r,f,connectance),
observed = V_sample(M)
))
res <- rbind(res, data.frame(n =n, r = r, f = f, connectance = connectance,i = i,
type = "E2",
expected = E2_an(r,f,connectance),
observed = E2_sample(M)
))
res <- rbind(res, data.frame(n =n, r = r, f = f, connectance = connectance,i = i,
type = "rho",
expected = rho_an(r,f,connectance),
observed = rho_sample(M)
))
res <- rbind(res, data.frame(n =n, r = r, f = f, connectance = connectance,i = i,
type = "rho1",
expected = (E2_an(r,f,connectance) - E_an(r,f,connectance)^2) / (V_an(r,f,connectance)) ,
observed = rho_sample(M)
))
print(res)
}
ggplot(res, aes(x = observed, y = expected, colour = type)) + geom_point() + geom_abline(slope = 1, intercept = 0) + facet_wrap(~type, scales = "free")
library(dplyr)
res %>% filter(type == "rho" | type == "rho1")
ggplot(res, aes(x = abs(observed), y = abs(expected), colour = type)) + geom_point() + geom_abline(slope = 1, intercept = 0) + facet_wrap(~type, scales = "free")
ggplot(res, aes(y = abs(expected) / abs(observed), y = r, colour = type)) + geom_point() + geom_abline(slope = 1, intercept = 0) + facet_wrap(~type, scales = "free")
ggplot(res, aes(y = expected / observed, y = r, colour = type)) + geom_point() + geom_abline(slope = 1, intercept = 0) + facet_wrap(~type, scales = "free")
ggplot(res, aes(y = expected / observed, x = r, colour = type)) + geom_point() + geom_abline(slope = 1, intercept = 0) + facet_wrap(~type, scales = "free")
source('~/.active-rstudio-document', echo=TRUE)
ggplot(res, aes(x = observed, y = expected, colour = type)) + geom_point() + geom_abline(slope = 1, intercept = 0) + facet_wrap(~type, scales = "free")
T <- matrix(c(0,1,0,0,0,1,1,0,0), 3, 3, byrow = TRUE)
T
Tour <- matrix(c(0,1,0,0,0,1,1,0,0), 3, 3, byrow = TRUE)
n <- ncol(Tour)
I <- diag(rep(1, n))
P2 <- Tour - t(Tour)
P3 <- array(0, c(n,n,n))
source('~/BB/tournaments/code/build_payoff_3.R')
P3
Induced
source('~/BB/tournaments/code/build_payoff_3.R')
source('~/BB/tournaments/code/build_payoff_3.R')
source('~/BB/tournaments/code/build_payoff_3.R')
P3[1,,]
P3[2,,]
sum(P3)
sum(P3[1,,])
sum(P3[2,,])
sum(P3[3,,])
P3[3,,]
require(dSolve)
library(deSolve)
x <- c(1/3, 1/3, 1/3)
t(x) %*% P3[1,,] %*% x
t(x) %*% P3[2,,] %*% x
t(x) %*% P3[3,,] %*% x
source('~/BB/tournaments/code/build_payoff_3.R')
out_p3
out_s3
P3[1,,]
P3[2,,]
plot(out_p3[,1], out_p3[,2])
plot(out_p3[,1], out_p3[,3])
plot(out_p3[,1], out_p3[,4])
dynamics_player3(0, c(1/2, 1/4, 1/4), pars = list(P3))
dynamics_sample3(0, c(1/2, 1/4, 1/4), pars = list(P2))
dynamics_sample3(0, c(1/2, 1/4, 1/4), pars = list(Tour))
source('~/BB/tournaments/code/build_payoff_3.R')
out_p3
out_s3
plot(out_s3)
plot(out_p3)
dynamics_player3(0, x, list(P3))
dynamics_sample3(0, x, list(P3))
dynamics_sample3(0, x, list(Tour))
dynamics_player3(0, x, list(P3))
dynamics_sample3(0, x, list(Tour))
source('~/BB/tournaments/code/build_payoff_3.R')
source('~/BB/tournaments/code/build_payoff_3.R')
dynamics_player3(0, x, list(P3))
dynamics_sample3(0, x, list(Tour))
sum(dynamics_player3(0, x, list(P3))[[1]])
dynamics_player3(0, x, list(P3))[[1]] - sum(dynamics_player3(0, x, list(P3))[[1]])
dynamics_player3(0, x, list(P3))[[1]] - mean(dynamics_player3(0, x, list(P3))[[1]])
P3[1,,]
P3[2,,]
source('~/BB/tournaments/code/build_payoff_3.R')
plot(out_p3)
out_p3
source('~/BB/tournaments/code/build_payoff_3.R')
source('~/BB/tournaments/code/build_payoff_3.R')
out_p3
out_s3
plot(out_s3[,1], out_s3[,2])
plot(out_s3[,1], out_s3[,3])
plot(out_s3[,1], out_s3[,4])
source('~/BB/tournaments/code/build_payoff_3.R')
plot(out_s3[,1], out_s3[,4])
source('~/BB/tournaments/code/build_payoff_3.R')
plot(out_s3[,1], out_s3[,4])
plot(out_s3[,1], out_s3[,3])
plot(out_s3[,1], out_s3[,2])
P3[1,,]
source('~/BB/tournaments/code/build_payoff_3.R')
out_p3
P3[1,,]
P3[1,,] <- matrix(c(0,-1,1/2,-1,-1,0,1/2,0,2),3,3, byrow = TRUE)
P3[2,,] <- matrix(c(2,1/2,0, 1/2,0,-1 ,0,-1,-1),3,3, byrow = TRUE)
source('~/BB/tournaments/code/build_payoff_3.R')
out_p3
out_s3
plot(out_p3[,2], out_s3[,2])
plot(out_p3[,3], out_s3[,3])
plot(out_p3[,4], out_s3[,4])
source('~/BB/tournaments/code/build_payoff_3.R')
T<-5
T
t(matrix(1:9,3,3))
source('~/BB/tournaments/code_compare_models/models.R')
run_dynamics()
source('~/BB/tournaments/code_compare_models/models.R')
run_dynamics()
source('~/BB/tournaments/code_compare_models/models.R')
run_dynamics()
run_dynamics()$equil_approx
source('~/BB/tournaments/code_compare_models/models.R')
run_dynamics()$equil_approx
run_dynamics(model = "sample2")$equil_approx
a <- run_dynamics(model = "sample2"); a$equil_approx
run_dynamics(model = "sample2")$equil_approx
a <- run_dynamics(model = "sample2"); a$equil_approx
a$time_series
plot(a$time_series)
a <- run_dynamics(model = "matrixgame"); a$equil_approx
plot(a$time_series)
a <- run_dynamics(model = "sample3"); a$equil_approx
source('~/BB/tournaments/code_compare_models/models.R')
a <- run_dynamics(model = "sample2"); a$equil_approx
plot(a$time_series)
source('~/BB/tournaments/code_compare_models/models.R')
plot(a$time_series)
a$time_series
source('~/BB/tournaments/code_compare_models/models.R')
a <- run_dynamics(model = "sample2"); a$equil_approx
a$time_series
plot(apply(a$time_series,1,sum))
source('~/BB/tournaments/code_compare_models/models.R')
a <- run_dynamics(model = "sample2"); a$equil_approx
plot(apply(a$time_series,1,sum))
source('~/BB/tournaments/code_compare_models/models.R')
a <- run_dynamics(model = "sample3"); a$equil_approx
a <- run_dynamics(model = "sample2"); a$equil_approx
source('~/BB/tournaments/code_compare_models/models.R')
a <- run_dynamics(model = "sample2"); a$equil_approx
a <- run_dynamics(model = "sample3"); a$equil_approx
T <- pars$T
Tournament = matrix(c(0,1,0, 0,0,1, 1,0,0), 3, 3, byrow = TRUE)
x <- rep(1,2,3)
Tournament %*% x
x%*% Tournament %*% x
x %*% Tournament %*% x
T <- Tournament
P <- array(0, rep(nrow(T), nrow(T)))
P
P <- array(0, rep(nrow(T), 3))
P
n <- nrow(T)
P <- array(0, rep(n, 3))
for (i in 1:n){
for(j in 1:n){
for(k in 1:n){
Z <- T[c(i,j,k), c(i,j,k)]
print(Z)
}
}
}
ll <- list()
ll <- c(ll, Z)
ll
ll <- list()
tmp <- 1
n <- nrow(T)
P <- array(0, rep(n, 3))
for (i in 1:n){
for(j in 1:n){
for(k in 1:n){
Z <- T[c(i,j,k), c(i,j,k)]
ll[tmp] <- Z
tmp <- tmp + 1
}
}
}
warnings()
ll
ll <- list()
tmp <- 1
n <- nrow(T)
P <- array(0, rep(n, 3))
for (i in 1:n){
for(j in 1:n){
for(k in 1:n){
Z <- T[c(i,j,k), c(i,j,k)]
ll[[tmp]] <- Z
tmp <- tmp + 1
}
}
}
unique(ll)
setwd("~/github/RacetrackData/code")
my_files <- list.files("../*.csv")
my_files
my_files <- list.files("../",pattern = "csv")
my_files
my_file <- my_files[1]
meta_data <- strsplit(my_file, "_")[[1]]
meta_data
Treatment <- meta_data[1]
Replicate <- meta_data[2]
Year <- as.integer(strsplit(meta_data[3], ".")[[1]][1])
source('~/github/RacetrackData/code/organize_data.R')
strsplit(meta_data[3], ".")[[1]][1]
strsplit(meta_data[3], "\\.")[[1]][1]
Year <- as.integer(strsplit(meta_data[3], "\\.")[[1]][1])
Year
my_file
tmp <- read.csv(paste0("../", my_file))
tmp
tmp <- read.csv(paste0("../", my_file))[,-1]
tmp
colname(tmp) <- 1:ncol(tmp)
colnames(tmp) <- 1:ncol(tmp)
tmp[1:3,]
tmp$Y <- rownames(tmp)
tmp$Y
tmp
tmp %>% spread("X", "Status", 1:(ncol(tmp)-1))
tmp %>% gather("X", "Status", 1:(ncol(tmp)-1))
tmp %>% gather("X", "Status", 1:(ncol(tmp)-1)) %>% head()
tmp <- tmp %>% gather("X", "Status", 1:(ncol(tmp)-1)) %>% select(X, Y, Status)
head(tmp)
source('~/github/RacetrackData/code/organize_data.R')
head(tmp)
str(tmp)
source('~/github/RacetrackData/code/organize_data.R')
str(tmp)
tmp %>% select(X, Y, Status) %>% spread(X, Status)
tmp %>% select(X, Y, Status) %>% spread(X, Y, Status)
nrow(tmp)
sort(unique(tmp$X))
sort(unique(tmp$Y))
meta_data <- strsplit(my_file, "_")[[1]]
Treatment <- meta_data[1]
Replicate <- meta_data[2]
Year <- as.integer(strsplit(meta_data[3], "\\.")[[1]][1])
# read the data
tmp <- read.csv(paste0("../", my_file))[,-1] # remove first column as it is not interesting
# set colnames to be the x coordinates, and rownames to be the y coordinates
colnames(tmp) <- 1:ncol(tmp)
# build a data.frame
# use a little trick from tidyr
tmp$Y <- rownames(tmp)
head(tmp)
tmp$Y
tmp %>% gather("X", "Status", 1:(ncol(tmp)-1)) %>% select(X, Y, Status)
tmp %>% gather("X", "Status", 1:(ncol(tmp)-1)) %>% select(X, Y, Status) %>% spread(X,Status)
tmp[1,]
tmp[35,]
tmp[9,]
tmp <- tmp %>% gather("X", "Status", 1:(ncol(tmp)-1)) %>% select(X, Y, Status)
tmp$Treatment <- Treatment
tmp$Replicate <- Replicate
tmp$Year <- Year
tmp
tmp %>% spread(X,Status)
source('~/github/RacetrackData/code/organize_data.R')
tmp %>% spread(X,Status)
tmp
source('~/github/RacetrackData/code/organize_data.R')
nrow(all_data)
save(all_data, file = "all_data_tidy.Rdata")
source('~/github/RacetrackData/code/organize_data.R')
load("all_data_tidy.Rdata")
source('~/github/RacetrackData/code/compute_transitions.R')
my_data <- all_data %>% filter(Treatment = "ZR", Replicate = "E", Year = 16)
str(all_data)
all_data %>% filter(Treatment = "ZR")
all_data %>% filter(Treatment == "ZR")
my_data <- all_data %>% filter(Treatment == "ZR", Replicate == "E", Year = 16)
my_data <- all_data %>% filter(Treatment == "ZR", Replicate == "E", Year == 16)
my_data
my_data$Xn <- my_data$X -1
my_data$Yn <- my_data$X -1
my_data
my_data[1,]
my_data[56,]
my_data$Yn <- my_data$Y -1
my_data[56,]
expand.gridc(c(1,0,-1), c(1,0,-1))
expand.grid(c(1,0,-1), c(1,0,-1))
Treat <- all_data[i,]$Treatment
i <- 1
Treat <- all_data[i,]$Treatment
Treat
Treat <- all_data[i,]$Treatment
Repl <- all_data[i,]$Replicate
Year <- all_data[i,]$Year
my_x <- all_data[i,]$X
my_y <- all_data[i,]$Y
all_neighbors <- rbind(my_x + neigh_shifts[,1], my_y + neigh_shifts[,2])
neigh_shifts <- expand.grid(c(1,0,-1), c(1,0,-1))
neigh_shifts <- neigh_shifts[-5,] # remove 0, 0
for (i in 1:nrow(all_data)){
Treat <- all_data[i,]$Treatment
Repl <- all_data[i,]$Replicate
Year <- all_data[i,]$Year
my_x <- all_data[i,]$X
my_y <- all_data[i,]$Y
all_neighbors <- rbind(my_x + neigh_shifts[,1], my_y + neigh_shifts[,2])
}
all_neighbors
my_x
my_y
source('~/github/RacetrackData/code/compute_transitions.R')
all_neighbors
all_data[c(X,Y) %in% all_neighbors]
all_data %>% filter(c(X,Y) %in% all_neighbors)
all_data %>% rowwise() %>% filter(c(X,Y) %in% all_neighbors)
all_data %>% filter(X %in% all_neighbors)
all_data %>% filter(X %in% all_neighbors[,1], Y %in% all_neighbors[,2])
my_x
my_y
source('~/github/RacetrackData/code/compute_transitions.R')
neig_data
neigh_data
source('~/github/RacetrackData/code/compute_transitions.R')
source('~/github/RacetrackData/code/compute_transitions.R')
all_data <- cbind(all_data, count_neigh)
head(all_data)
all_data
source('~/github/RacetrackData/code/compute_transitions.R')
count_neigh
neigh_data
neigh_data
neigh_data
source('~/github/RacetrackData/code/compute_transitions.R')
source('~/github/RacetrackData/code/compute_transitions.R')
neigh_shifts
all_neighbors
source('~/github/RacetrackData/code/compute_transitions.R')
neigh_data
my_x
my_y
source('~/github/RacetrackData/code/compute_transitions.R')
source('~/github/RacetrackData/code/compute_transitions.R')
source('~/github/RacetrackData/code/compute_transitions.R')
source('~/github/RacetrackData/code/compute_transitions.R')
source('~/github/RacetrackData/code/compute_transitions.R')
source('~/github/RacetrackData/code/compute_transitions.R')
source('~/github/RacetrackData/code/compute_transitions.R')
my_x
my_y
all_neighbors
neigh_data <- all_data %>% filter(X %in% all_neighbors[,1],  # The cell is a neighbor of the current cell
Y %in% all_neighbors[,2],
Treatment == Treat, # same metadata
Replicate == Repl,
Year == Year)
## Three extra columns for the count of n
neigh_data
neigh_data %>% filter(X != Y)
neigh_data %>% filter(X != my_x & Y != my_y)
neigh_data
neigh_data %>% rowwise() %>% filter(X != my_x & Y != my_y\)
neigh_data %>% rowwise() %>% filter(X != my_x & Y != my_y)
source('~/github/RacetrackData/code/compute_transitions.R')
all_data
source('~/github/RacetrackData/code/compute_transitions.R')
head(all_data)
sample_n(all_data, 100)
summary(count_neigh)
source('~/github/RacetrackData/code/compute_transitions.R')
neigh_data
source('~/github/RacetrackData/code/compute_transitions.R')
source('~/github/RacetrackData/code/compute_transitions.R')
save(all_data, "all_data_with_neighbor_count.Rdata")
save(all_data, file = "all_data_with_neighbor_count.Rdata")
all_data
source('~/github/RacetrackData/code/compute_probabilities.R')
all_data
all_data %>% mutate(Year = paste0("Yr", Year))
all_data %>% head() %>% spread(Year, Status)
all_data <- all_data %>% mutate(Year = paste0("Yr", Year))
all_data %>% head() %>% spread(Year, Status)
load("all_data_with_neighbor_count.Rdata")
all_data <- all_data %>% mutate(Year = paste0("Yr", Year))
all_data %>% head() %>% spread(Year, Status)
load("all_data_with_neighbor_count.Rdata")
all_data <- all_data %>% mutate(Year = paste0("Yr", Year))
all_data
all_data <- all_data %>% filter(is.na(Dollar) == FALSE)
all_data
all_data %>% sample_n(100) %>% spread(Year, Status)
source('~/github/RacetrackData/code/compute_probabilities.R')
all_data
all_data %>% mutate(Status_next = all_data %>% filter(Treatment = Treatment)$Status)
all_data %>% mutate(Status_next = all_data %>% filter(Treatment = Treatment) %>% select(Status))
all_data %>% mutate(Status_next = all_data %>% filter(Treatment == Treatment) %>% select(Status))
next_year <- all_data %>% select(X, Y, Status, Year)
head(all_data)
next_year <- all_data %>% select(X, Y, Status, Treatment, Replicate, Year)
head(next_year)
next_year <- next_year %>% mutate(Year = Year - 1) %>% rename(StatusNext = Status)
head(next_year)
all_transitions <- inner_join(all_data, next_year)
all_transitions
sort(unique(all_data$Year))
sort(unique(all_transitions$Year))
all_transitions %>% group_by(Empty, Dollar, Grass, Status, StatusNext) %>% summarise(ObservedTransitions = n())
all_transitions <- all_transitions %>% group_by(Empty, Dollar, Grass, Status, StatusNext) %>% summarise(ObservedTransitions = n())
all_transitions
as.data.frame()all_transitions
as.data.frame(all_transitions)
all_transitions %>% spread(Status, ObservedTransitions)
all_transitions %>% spread(StatusNext, ObservedTransitions)
all_transitions <- all_transitions %>% spread(StatusNext, ObservedTransitions)
colnames(all_transitions[5:7]) <- c("pEmpty", "pDollar", "pGrass")
source('~/github/RacetrackData/code/compute_probabilities.R')
colnames(all_transitions)[5:7] <- c("pEmpty", "pDollar", "pGrass")
colnames(all_transitions) <- c(colnames(all_transitions)[1:4], "pEmpty", "pDollar", "pGrass")
c(colnames(all_transitions)[1:4], "pEmpty", "pDollar", "pGrass")
head(all_transitions)
rm(list = ls())
library(dplyr)
library(tidyr)
load("all_data_with_neighbor_count.Rdata")
all_data <- all_data %>% filter(is.na(Dollar) == FALSE)
next_year <- all_data %>% select(X, Y, Status, Treatment, Replicate, Year)
next_year <- next_year %>% mutate(Year = Year - 1) %>% rename(StatusNext = Status)
all_transitions <- inner_join(all_data, next_year)
head(all_transitions)
source('~/github/RacetrackData/code/compute_probabilities.R')
head(all_transitions)
all_transitions$pEmpty <- all_transitions$pEmpty / rowSums(all_transitions [,5:7], na.rm = TRUE)
head(all_transitions)
source('~/github/RacetrackData/code/compute_probabilities.R')
head(all_transitions)
rowSums(all_transitions[,5:7], na.rm = TRUE)
source('~/github/RacetrackData/code/compute_probabilities.R')
head(all_transitions)
source('~/github/RacetrackData/code/compute_probabilities.R')
rowSums(all_transitions[,5:7], na.rm = TRUE)
length(rowSums(all_transitions[,5:7], na.rm = TRUE))
source('~/github/RacetrackData/code/compute_probabilities.R')
source('~/github/RacetrackData/code/compute_probabilities.R')
